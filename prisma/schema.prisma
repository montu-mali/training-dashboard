generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String    @unique
  password   String
  role       Role      @default(TRAINEE)
  avatar     String?
  phone      String?
  department String?
  position   String?
  bio        String?
  skills     String[]
  timezone   String    @default("UTC")
  language   String    @default("en")
  isActive   Boolean   @default(true)
  lastLogin  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  createdModules Module[]
  // assignments    Assignment[]
  // assignedBy     Assignment[]   @relation("AssignmentInstructor")
  Assignment     Assignment[]

  @@map("users")
}

model Module {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  content           String
  category          String?
  estimatedDuration Int // in minutes
  isActive          Boolean  @default(true)
  isPublished       Boolean  @default(true)
  version           String   @default("1.0.0")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [instructorId], references: [id])
  instructorId String
  assignments  Assignment[]
}

model Assignment {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  status              AssignmentStatus @default(PENDING)
  maxAttempts         Int              @default(3)
  passingScore        Int              @default(70)
  timeLimit           Int? // in minutes
  allowLateSubmission Boolean          @default(true)
  isActive            Boolean          @default(true)
  metadata            Json             @default("{}")
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  // Relations
  moduleId     String
  module       Module @relation(fields: [moduleId], references: [id])
  traineeId    String
  user         User   @relation(fields: [traineeId], references: [id])
  instructorId String
}

// Enums
enum Role {
  ADMIN
  INSTRUCTOR
  TRAINEE
  MANAGER
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AssignmentStatus {
  PENDING
  IN_PROGRESS
  SUBMITTED
  REVIEWED
  COMPLETED
  OVERDUE
}



